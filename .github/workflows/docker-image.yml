name: Docker Image CI

on:
  push:
    paths: 'Backend/Aduno/**'
  workflow_dispatch:

env:
  DOCKER_USER: nydery
  DOCKER_CONTAINER: aduno-backend
  REGISTRY: ghcr.io
  IMAGE_NAME: aduno-backend

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
#   - name: Build API docker image
#      run: |
#        cd Backend/Aduno
#        docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Login to the Container registry (Github container registry)
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
         
    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: ./Backend/Aduno
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  
#    - name: Push docker image
#      run: |
#        docker push ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}
#        docker logout
    
  start-docker-container-on-vm:
    needs:
      - build-and-push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Install ssh key
        uses: caberger/install-ssh-key@v1.0
        with:
            ssh-private-key:  ${{ secrets.SSH_PRIVATE_KEY }}
            user: ${{ secrets.REMOTE_USER }}
            server: ${{ secrets.REMOTE_HOST }}
            alias: server

      - name: Remove existing container
        run: |
          ssh server "sudo docker stop ${{ env.DOCKER_CONTAINER }} || echo 'Container doesnt exist!'"
          ssh server "sudo docker rm ${{ env.DOCKER_CONTAINER }} || echo 'No container to remove'"
          
      - name: Pull latest docker image
        run: ssh server "sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
 #       run: ssh server "sudo docker pull ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:latest"

      - name: Create docker container
        run: ssh server "sudo docker run -d --name ${{ env.DOCKER_CONTAINER }} -p 8080:80 -p 8081:443 ${{ env.DOCKER_USER }}/${{ env.IMAGE_NAME }}:latest"
